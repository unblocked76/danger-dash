const _UnknownResourceStream_={};const _LoadingResourceStream_={};ResourceLoader=function(){throw new Error("[ResourceLoader.js] ResourceLoader is a statics class # Not allow create new instance.")};ResourceLoader.cacheResourceAsStream=function(a){if(typeof ResourceLoader.s_ResouceStreamCached=="undefined"){ResourceLoader.s_ResouceStreamCached={}}if(typeof ResourceLoader.s_ResouceStreamCached[a]==="undefined"||ResourceLoader.s_ResouceStreamCached[a]===_UnknownResourceStream_){Dbg("[ResourceLoader.js] cacheResourceAsStream("+a+") # started");ResourceLoader.s_ResouceStreamCached[a]=_LoadingResourceStream_;xhrHandleLoadFile(a)}if(ResourceLoader.s_ResouceStreamCached[a]===_LoadingResourceStream_){Dbg("[ResourceLoader.js] cacheResourceAsStream("+a+") # loading...");return false}else{Dbg("[ResourceLoader.js] cacheResourceAsStream("+a+") # done");return true}};ResourceLoader.getResourceAsStream=function(a){if(typeof ResourceLoader.s_ResouceStreamCached==="undefined"||typeof ResourceLoader.s_ResouceStreamCached[a]==="undefined"){var b=new Error("[ResourceLoader.js] getResourceAsStream() # Error 1 :"+a);b.RESOURCE_SHOULD_BE_CACHED=a;throw b}if(ResourceLoader.s_ResouceStreamCached[a]===_UnknownResourceStream_){throw new Error("[ResourceLoader.js] getResourceAsStream() # Error 2")}if(ResourceLoader.s_ResouceStreamCached[a]===_LoadingResourceStream_){throw new Error("[ResourceLoader.js] getResourceAsStream() # Error 3")}if(!(ResourceLoader.s_ResouceStreamCached[a] instanceof ArrayBuffer)){throw new Error("[ResourceLoader.js] getResourceAsStream() # Error 4")}return new ByteArrayInputStream(ResourceLoader.s_ResouceStreamCached[a])};ResourceLoader.freeCacheResourceStream=function(a){ResourceLoader.s_ResouceStreamCached[a]=null};ResourceLoader.freeAllCachedResources=function(){for(var a in ResourceLoader.s_ResouceStreamCached){ResourceLoader.s_ResouceStreamCached[a]=null}ResourceLoader.s_ResouceStreamCached=null};function xhrSwitchState(a){var b=this;switch(b.readyState){case 0:Dbg("[ResourceLoader.js] XMLHttpRequest # open() has not been called yet.");break;case 1:Dbg("[ResourceLoader.js] XMLHttpRequest # send() has not been called yet.");break;case 2:Dbg("[ResourceLoader.js] XMLHttpRequest # send() has been called, headers and status are available.");break;case 3:Dbg("[ResourceLoader.js] XMLHttpRequest # Downloading, responseText holds the partial data.");break;case 4:Dbg("[ResourceLoader.js] XMLHttpRequest # Complete!");if(b.status===200){xhrSuccess.call(b,a)}else{xhrError.call(b,a)}break}}function xhrSuccess(a){var b=this;if(!(b.response instanceof ArrayBuffer)){throw new Error("Response invalid!")}ResourceLoader.s_ResouceStreamCached[a]=b.response;if(b.cbSuccess){b.cbSuccess()}}function xhrTimeout(){var a=this;Err("[ResourceLoader.js] XMLHttpRequest # The request for "+a.fName+" timed out.");if(a.cbError){a.cbError()}}function xhrError(a){ResourceLoader.s_ResouceStreamCached[a]=_UnknownResourceStream_;var b=this;Err("[ResourceLoader.js] XMLHttpRequest # The request for "+b.fName+" error("+b.statusText+")");if(b.cbError){b.cbError()}}function xhrHandleLoadFile(b,a,c){try{var f=new XMLHttpRequest();f.fName=_ROOT_DATA_PATH_+b+"?v="+VERSION;f.open("GET",f.fName,true);f.cbSuccess=a;f.cbError=c;f.onreadystatechange=xhrSwitchState.bind(f,b);f.ontimeout=xhrTimeout;if(typeof ArrayBuffer=="undefined"){throw new Error("Browser is not support ArrayBuffer.")}f.responseType="arraybuffer";f.send(null)}catch(d){Err("[ResourceLoader.js] xhrHandleLoadFile #"+d);throw d}};